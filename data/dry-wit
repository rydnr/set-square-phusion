#!/bin/bash
# (c) 2008-today Automated Computing Machinery, S.L.
#
#    This file is part of dry-wit.
#
#    dry-wit is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    dry-wit is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with dry-wit.  If not, see <http://www.gnu.org/licenses/>.

#set -o errexit  # terminate on any unhandled error
#set -o nounset  # terminate on any unset variable
set -o pipefail # In a pipe, the exit status of the last command that threw a non-zero exit code is returned.
#set -o xtrace   # trace what gets executed

export TRUE=0;
export FALSE=1;

if [ "$1" != "" ]; then
  export SCRIPT_NAME="$(basename $1)";
else
  export SCRIPT_NAME="$0";
fi

declare -a __DRYWIT_BOOTSTRAP_MODULES=(\
   "stdlib" \
   "string" \
   "color" \
   "array" \
   "check" \
   "envvar" \
   "constant" \
   "error" \
   "term" \
   "echo" \
   "logging" \
   "cli" \
   "usage" \
   "dw-plumbing" \
   "file" \
);

declare -a __DRYWIT_IMPORTED_MODULES;

export DRYWIT_MODULE_TAG="master";
export DRYWIT_MODULE_URL="https://raw.githubusercontent.com/rydnr/dry-wit/${DRYWIT_MODULE_TAG}/src/modules";
export DRYWIT_MODULE_PATH="${HOME}/.dry-wit/modules"

## A fail-safe version of checkNotEmpty.
## -> 1: The parameter name.
## -> 2: The parameter value.
## -> 3: The parameter index.
## <- Exits if the parameter value is empty.
## Example:
##   DRYWIT.failsafeLogTrace SUCCESS "done"
function DRYWIT.failsafeCheckNotEmpty() {
  local _name="${1}";
  if [ -z "${_name}" ]; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi
  local _value="${2}";

  if [ -z "${_value}" ]; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (${_value}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi

  local _index="${3}";
  if [ -z "${_index}" ]; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi
}

## A fail-safe version of logTrace.
## -> 1: The outcome.
## -> 2: The message.
## Example:
##   DRYWIT.failsafeLogTrace SUCCESS "done"
function DRYWIT.failsafeLogTrace() {
  local _message="${1}";

  DRYWIT.failsafeCheckNotEmpty "module" "${_module}" 1;

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## logTrace is loaded.
  if DRYWIT.failsafeIsFunctionDefined "logTrace"; then
    logTrace -n "${_message}";
  fi
}

## A fail-safe version of logTraceResult.
## -> 1: The outcome.
## -> 2: The message.
## Example:
##   DRYWIT.failsafeLogTraceResult SUCCESS "done"
function DRYWIT.failsafeLogTraceResult() {
  local _outcome="${1}";
  local _outcomeMessage="${2}";

  DRYWIT.failsafeCheckNotEmpty "outcome" "${_outcome}" 1;
  DRYWIT.failsafeCheckNotEmpty "outcomeMessage" "${_outcomeMessage}" 2;

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## logTraceResult is loaded.
  if DRYWIT.failsafeIsFunctionDefined "logTraceResult"; then
    logTraceResult ${_outcome} "${_outcomeMessage}";
  fi
}

## Checks if a given function is defined.
## -> 1: The function name.
## <- 0/${TRUE} if the function is defined; 1/${FALSE} otherwise.
## Example:
##   if DRYWIT.failsafeIsFunctionDefined "readFile"; then
##     echo "readFile defined";
##   fi
function DRYWIT.failsafeIsFunctionDefined() {
  local _function="${1}";
  local -i _rescode;

  type "${_function}" 2> /dev/null | grep -q 'function';
  _rescode=$?;

  return ${_rescode};
}

## Checks if an element is already contained in an array.
## -> 1: The array (passed as "${array[@]}".
## -> 2: The element to check.
## <- 0/${TRUE}: If the element is present in the array; 1/${FALSE} otherwise.
## Example:
##   a=("one" "two" "three" "other number")
##   if DRYWIT.failsafeArrayContains "${array[@]}" "other number"; then
##     ...
##   fi
function DRYWIT.failsafeArrayContains() {
  local _array="${1}";
  local _item="${2}";
  local _aux;
  local -i _rescode=${FALSE};
  local _oldIFS="${IFS}";

  IFS=$' \t\n';
  for _aux in ${_array}; do
    IFS="${_oldIFS}";
    if [[ "${_aux}" == "${_item}" ]]; then
      _rescode=${TRUE};
      break;
    fi
  done
  IFS="${_oldIFS}";

  return ${_rescode};
}


## Downloads given module.
## -> 1: The module name.
## <- 0/${TRUE} if the module is downloaded; 1/${FALSE} otherwise.
## Example:
##   if downloadModule "fibonacci"; then
##     echo "fibonacci module downloaded";
##   fi
function downloadModule() {
  local _module="${1}";
  local -i _rescode;
  local _result="";

  DRYWIT.failsafeCheckNotEmpty "module" "${_module}" 1;

  mkdir -p "${DRYWIT_MODULE_PATH}";

  DRYWIT.failsafeLogTrace "Downloading '${_module}' module from ${DRYWIT_MODULE_URL}/${_module}.dw";
  curl -s "${DRYWIT_MODULE_URL}/${_module}.dw" > "${DRYWIT_MODULE_PATH}/${_module}.dw";
  _rescode=$?;
  if [[ ${_rescode} -eq ${TRUE} ]]; then
    DRYWIT.failsafeLogTraceResult SUCCESS "done";
    export RESULT="${DRYWIT_MODULE_PATH}/${_module}.dw";
  else
    DRYWIT.failsafeLogTraceResult FAILURE "failed";
  fi

  return ${_rescode};
}

function DRYWIT.bootstrap() {
  local _module;
  local _modulePath;
  local _oldIFS="${IFS}";
  IFS="${_oldIFS}";

  IFS=$' \t\n';
  for _module in ${__DRYWIT_BOOTSTRAP_MODULES[*]}; do
    IFS="${_oldIFS}";
    import "${_module}";
  done
  IFS="${_oldIFS}";
}

function import() {
  local _module="${1}";

  ## Needed since this function is used in bootstrapping, and could be loaded before
  ## checkNotEmpty is loaded.
  DRYWIT.failsafeCheckNotEmpty "module" "${_module}" 1;

  if findModule "${_module}"; then
    _modulePath="${RESULT}";
  elif downloadModule "${_module}"; then
    _modulePath="${RESULT}";
  else
    echo "ERROR: Required module ${_module}.dw not found. Is it correctly spelled?"
    exit 1;
  fi

  if DRYWIT.failsafeArrayContains "${__DRYWIT_IMPORTED_MODULES[*]}" "${_module}"; then
    DRYWIT.failsafeLogTrace "Not sourcing ${_modulePath} since it's already sourced";
  else
    DRYWIT.failsafeLogTrace -n "Loading ${_modulePath}";
    source "${_modulePath}";
    DRYWIT.failsafeLogTraceResult SUCCESS "done";
    __DRYWIT_IMPORTED_MODULES[${#__DRYWIT_IMPORTED_MODULES[@]}]="${_module}";
  fi
}

function findModule() {
  local _module="${1}";
  local -i _rescode=${FALSE};

  if [[ -e "${DRYWIT_MODULE_PATH}/${_module}.dw" ]]; then
    _rescode=${TRUE};
    export RESULT="${DRYWIT_MODULE_PATH}/${_module}.dw";
  fi

  return ${_rescode};
}

DRYWIT.bootstrap;

source $@;

DRYWIT.main $@;

cleanup;
#




