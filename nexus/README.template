This image runs Nexus ${NEXUS_VERSION}

A default Logstash configuration may not be enough for your specific needs.
You can provide yours when launching the image, by volume-mounting
/etc/logstash/conf.d/${IMAGE}.conf

Examples:
- Default invocation:
> docker run -d -p ${NEXUS_UI_HTTP_PORT}:${NEXUS_UI_HTTP_PORT} -p ${NEXUS_UI_HTTPS_PORT}:${NEXUS_UI_HTTPS_PORT} -p ${NEXUS_DOCKER_REGISTRY_PORT}:${NEXUS_DOCKER_REGISTRY_PORT} -p ${NEXUS_DOCKER_GROUP_PORT}:${NEXUS_DOCKER_GROUP_PORT} -v ${HOST_VOLUMES_ROOT_FOLDER}/${IMAGE}/conf:/backup/${IMAGE}/conf -v ${HOST_VOLUMES_ROOT_FOLDER}/${IMAGE}/blobs:/backup/${IMAGE}/blobs -v ${HOST_VOLUMES_ROOT_FOLDER}/${IMAGE}/db:/backup/${IMAGE}/db --name ${NEXUS_DEFAULT_VIRTUAL_HOST} ${NAMESPACE}/${IMAGE}:${TAG}

- Run Nexus, using a data container to store its persistent data (which declares /backup/${IMAGE}/* as volumes):

> docker run -p ${NEXUS_UI_HTTP_PORT}:${NEXUS_UI_HTTP_PORT} -p ${NEXUS_UI_HTTPS_PORT}:${NEXUS_UI_HTTPS_PORT} -p ${NEXUS_DOCKER_REGISTRY_PORT}:${NEXUS_DOCKER_REGISTRY_PORT} -p ${NEXUS_DOCKER_GROUP_PORT}:${NEXUS_DOCKER_GROUP_PORT} --volumes-from [data-container] ${NAMESPACE}/${IMAGE}:${TAG}

- To customize how Logstash processes Nexus logs:
> docker run .. -v [my-logstash-conf]:/etc/logstash/conf.d/${IMAGE}.conf ..

- Of course, you can disable Logstash altogether if you so wish:
> docker run .. -e ENABLE_LOGSTASH=false ..

# Backup

The built-in backup mechanism copies regularly the contents of /backup/${IMAGE}/* and /backup/rsnapshot to a remote server ${IMAGE}${BACKUP_HOST_SUFFIX},
which is expected to be running a SSH server listening at port ${BACKUP_HOST_SSH_PORT}.

## Preparation

Choose a root folder to contain all data stored in Nexus. We'll use this variable extensively.

> export ROOT_FOLDER=${HOME}/${NEXUS_DEFAULT_VIRTUAL_HOST}-data

Create a folder to store all persistent information both in the host where Nexus will be running, and in the backup host (if you use such approach):

> mkdir -p ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/conf ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/blobs ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/db ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/rsnapshot

Optionally, use a data container to simplify the access to the persistent data:

> docker run --name ${NEXUS_DEFAULT_VIRTUAL_HOST}-data -d -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/conf:/backup/${IMAGE}/conf -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/blobs:/backup/${IMAGE}/blobs -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/db:/backup/${IMAGE}/db -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/rsnapshot:/backup/${IMAGE}/rsnapshot acmsl-phusion/data:latest

In the host at ${IMAGE}${BACKUP_HOST_SUFFIX}, launch another Nexus container as follows:

> docker run -d --name ${NEXUS_DEFAULT_VIRTUAL_HOST}-backup -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/blobs:/backup/${IMAGE}/blobs -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/conf:/backup/${IMAGE}/conf -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/db:/backup/${IMAGE}/db -v ${ROOT_FOLDER}/${NEXUS_DEFAULT_VIRTUAL_HOST}/rsnapshot:/backup/rsnapshot ${REGISTRY}/${NAMESPACE}/${IMAGE}:${TAG} backup

Alternatively, if you chose to use a data container,

> docker run -d --name ${NEXUS_DEFAULT_VIRTUAL_HOST}-backup --volumes-from ${NEXUS_DEFAULT_VIRTUAL_HOST}-data ${REGISTRY}/${NAMESPACE}/${IMAGE}:${TAG} backup

## Launching nginx-proxy

> docker run -d --name nginx -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy

## Launching Nexus

The VIRTUAL_HOST variable is used by nginx-proxy to auto-configure virtual hosting.

> docker run -d -p 443:${NEXUS_DOCKER_REGISTRY_PORT} -p ${NEXUS_DOCKER_GROUP_PORT}:${NEXUS_DOCKER_GROUP_PORT} -p ${NEXUS_UI_HTTP_PORT}:${NEXUS_UI_HTTP_PORT} -e VIRTUAL_HOST=${NEXUS_DEFAULT_VIRTUAL_HOST} -e VIRTUAL_PORT=${NEXUS_UI_HTTP_PORT} -v ${ROOT_FOLDER}/${IMAGE}/conf:/backup/${IMAGE}/conf -v ${ROOT_FOLDER}/${IMAGE}/blobs:/backup/${IMAGE}/blobs -v ${ROOT_FOLDER}/${IMAGE}/db:/backup/${IMAGE}/db -v ${ROOT_FOLDER}/rsnapshot:/backup/${IMAGE}/rsnapshot ${NAMESPACE}/${IMAGE}:${TAG}

If you created the data-container previously, launch Nexus with:

> docker run -d --name ${NEXUS_DEFAULT_VIRTUAL_HOST} -p 443:${NEXUS_DOCKER_REGISTRY_PORT} -p ${NEXUS_DOCKER_GROUP_PORT}:${NEXUS_DOCKER_GROUP_PORT} -p ${NEXUS_UI_HTTP_PORT}:${NEXUS_UI_HTTP_PORT} -e VIRTUAL_HOST=${NEXUS_DEFAULT_VIRTUAL_HOST} -e VIRTUAL_PORT=${NEXUS_UI_HTTP_PORT} --volumes-from ${NEXUS_DEFAULT_VIRTUAL_HOST}-data ${NAMESPACE}/${IMAGE}:${TAG}

## Configuration

What follows assumes you're interested to use Nexus as a Docker registry for your private images.

In the web interface, you'll need to create three groups: a proxy for Docker hub, a hosted group for in-house images, and a group containing them.

To do so, assuming you have an nginx-proxy upfront (or the ${NEXUS_UI_HTTP_PORT} port is mapped to 80), first visit http://${VIRTUAL_HOST}.
The first thing you'll be asked for is the temporary password. You can see it as follows (or you can pipe it to xclip directly).

> docker exec -it ${NEXUS_DEFAULT_VIRTUAL_HOST} cat /opt/sonatype/sonatype-work/nexus3/admin.password

Follow the instructions to reset the admin password. Then, go to Components (the gear icon), and create the required repositories.

### Docker Hub

- Create a new 'docker (proxy)' repository.
- Use 'Docker-Hub-proxy' as name.
- Specify https://registry-1.docker.io for the Remote storage URL.
- Enable Docker V1 API support, if required by the remote repository.
- Enter https://index.docker.io/ as the url of the Docker index.
- Select Blob store for Storage.

### In-house images

- Create a new 'docker (hosted)' repository.
- Name it as 'Docker-${NAMESPACE}-images'.
- Enable the HTTPS connector, on port ${NEXUS_DOCKER_REGISTRY_PORT}.
- Enable Docker v1 API support if required.
- Choose the Blob store.

### Repository Group

- Create a new 'docker (group)',
- Name it as 'Docker'.
- Enable Docker v1 API support if required.
- Choose the Blob store to use.
- Add 'Docker-${NAMESPACE}-images' to the group.
- Add 'Docker-Hub-proxy' to the group.

## Self-signed certificate

For the Docker-${NAMESPACE}-images repository to work, Nexus must be listening SSL traffic on port ${NEXUS_DOCKER_REGISTRY_PORT}. We'll add a self-signed certificate as follows:

> keytool -genkeypair -keystore '${NEXUS_SSL_CERTIFICATE_STORE_PATH}' -storepass '${NEXUS_SSL_CERTIFICATE_STORE_PASSWORD}' -keypass '${NEXUS_SSL_CERTIFICATE_KEY_PASSWORD}' -alias '${NEXUS_SSL_CERTIFICATE_ALIAS}' -keyalg ${NEXUS_SSL_CERTIFICATE_ALGORITHM} -keysize ${NEXUS_SSL_CERTIFICATE_KEY_SIZE} -validity ${NEXUS_SSL_CERTIFICATE_VALIDITY} -dname "CN=*.${NEXUS_DOMAIN}, OU=${NEXUS_SSL_CERTIFICATE_ORGANIZATION_UNIT}, O=${NEXUS_SSL_CERTIFICATE_ORGANIZATION}, L=${NEXUS_SSL_CERTIFICATE_LOCALITY}, ST=${NEXUS_SSL_CERTIFICATE_STATE}, C=${NEXUS_SSL_CERTIFICATE_COUNTRY}" -ext "SAN=DNS:${NEXUS_DOMAIN},IP:${NEXUS_IP_ADDRESS}" -ext "BC=ca:true"

## Recovery

The recovery process, once the original Nexus instance is shutdown, consists of:
- Copying the contents of ${ROOT_FOLDER}/${IMAGE}/blobs, ${ROOT_FOLDER}/${IMAGE}/conf, ${ROOT_FOLDER}/nexus/db, and ${ROOT_FOLDER}/rsnapshot to the server where Nexus will run.
- Launch a new container as defined in this document, binding the volumes of the container to the host folders.

## Important notice

It's important to notice that this image can be used as Docker registry. So if it's shut down, it obviously cannot serve any Docker images nor layers.
For that reason, it's recommended to identify potential hosts that would be potentially used for Nexus fail-back hosts, and ensure they have their local copy of ${REGISTRY}/${NAMESPACE}/${IMAGE}:${TAG}. For "latest" tags, that would need a cron job to force they stay current.
